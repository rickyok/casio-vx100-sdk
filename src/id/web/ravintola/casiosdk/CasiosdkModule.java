/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package id.web.ravintola.casiosdk;

import java.util.HashMap;

import org.appcelerator.kroll.KrollModule;

import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import jp.co.casio.caios.framework.device.*;
import jp.co.casio.caios.framework.device.lineprintertools.BuildinEx840;
import jp.co.casio.caios.framework.device.lineprintertools.LinePrinterDeviceBase;


@Kroll.module(name="Casiosdk", id="id.web.ravintola.casiosdk")
public class CasiosdkModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "CasiosdkModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public CasiosdkModule()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public String example()
	{
		Log.d(LCAT, "example called");
		return "hello world";
	}
	
	@Kroll.method
	public void lineDisplaySetBackground(int value) {
		LineDisplay ld = new LineDisplay();
		int response;
		response = ld.open(DeviceCommon.DEVICE_MODE_COMMON, DeviceCommon.DEVICE_HOST_LOCALHOST);
		if(response != 0)
		{
			// error
		}
		if (value == 1) {
			response = ld.setBacklight(LineDisplay.LCD_BACKLIGHT_GREEN);
		}
		else if (value == 2) {
			response = ld.setBacklight(LineDisplay.LCD_BACKLIGHT_EMEGREEN);
		}
		else if (value == 3) {
			response = ld.setBacklight(LineDisplay.LCD_BACKLIGHT_WHITE);
		}
		else {
			response = ld.setBacklight(LineDisplay.LCD_BACKLIGHT_OFF);
		}
		response = ld.close();
	}
	
	@Kroll.method
	public void drawerEject() {
		Drawer dw = new Drawer();
		int response;
		response = dw.open(DeviceCommon.DEVICE_MODE_COMMON, DeviceCommon.DEVICE_HOST_LOCALHOST);
		if(response != 0)
		{
			// error
		}
		response = dw.setOpen(Drawer.DEVICE_DRAWER_NO1);
		if(response != 0)
		{
			// error
		}
		boolean result = dw.getStatus(Drawer.DEVICE_DRAWER_NO1);
		if(result == true)
		{
			// Drawer Open
		}
		response = dw.close();
	}
	
	@Kroll.method
	public HashMap<String, String> mcrRead() {
		HashMap<String, String> retval = new HashMap<String, String>();
		Mcr mcr = new Mcr();
		int response;
		response = mcr.open(DeviceCommon.DEVICE_MODE_COMMON, DeviceCommon.DEVICE_HOST_LOCALHOST);
		if(response != 0)
		{
			// error
		}
		byte[] track1 = new byte[78];
		byte[] track2 = new byte[39];
		byte[] track3 = new byte[71];
		boolean result = mcr.readData(track1, track2, track3);
		if(result == true)
		{
			// Data Check
			retval.put("track1", track1.toString());
			retval.put("track2", track2.toString());
			retval.put("track3", track3.toString());
		}
		response = mcr.close();		
		return retval;
	}
	
	
	private void printComPort(int comPort , int baud , String value) {
		SerialCom com = new SerialCom();
		int response;
		int baudSetting = 0;
		if (baud == 9600) baudSetting = SerialCom.SERIAL_BOUDRATE_9600;
		if (baud == 19200) baudSetting = SerialCom.SERIAL_BOUDRATE_19200;
		response = com.open(SerialCom.SERIAL_TYPE_COM1, DeviceCommon.DEVICE_MODE_COMMON, DeviceCommon.DEVICE_HOST_LOCALHOST);
		if(response != 0)
		{
			// error
		}
		boolean result = com.connectCom(baudSetting, SerialCom.SERIAL_BITLEN_8, SerialCom.SERIAL_PARITY_NON, SerialCom.SERIAL_STOP_1, SerialCom.SERIAL_FLOW_NON);
		if(result != true)
		{
			// error
		}
		byte[] se1 = { '1','2','3','4','5','6','7','8','9','0',0x0d,0x0a,0x1b,0x64,5 };
		response = com.writeData(se1, se1.length);
		if(response != 0)
		{
			// error
		}
		response = com.getEndStatus();
		if(response != 0)
		{
			// error
		}
		response = com.close();
	}
	
	@Kroll.method
	public void printComTmu(int comPort , String value) {
		this.printComPort(comPort, 9600, value);
	}
	
	@Kroll.method
	public void printComTmt(int comPort , String value) {
		this.printComPort(comPort, 19200, value);
	}
	
	@Kroll.method
	public void lineDisplay(String line1 , String line2) {
		LineDisplay ld = new LineDisplay();
		int response;
		response = ld.open(DeviceCommon.DEVICE_MODE_COMMON, DeviceCommon.DEVICE_HOST_LOCALHOST);
		if(response != 0)
		{
			// error
		}
		response = ld.clear();
		if(response != 0)
		{
			// error
		}
		byte[] set1 = line1.getBytes();
		byte[] set2 = line2.getBytes();
		response = ld.setText(set1, set2, LineDisplay.LCD_CONTROL_NORMAL);
		if(response != 0)
		{
			// error
		}
		response = ld.close();
	}
	
	@Kroll.method
	public void printText2(String value) {
		LinePrinterDeviceBase linePrinterDevice = new BuildinEx840();
		linePrinterDevice.setCharacterSet(LinePrinterDeviceBase.CHARACTERSET_JAPAN);
								// International character set.
		linePrinterDevice.setPageMode(LinePrinterDeviceBase.PAGEMODE_KANA);
								// Character table.
		linePrinterDevice.setMulticharMode(LinePrinterDeviceBase.MULTICHARMODE_SHIFTJIS);							// Kanji mode.
		LinePrinter linePrinter = new LinePrinter();
		linePrinter.open(linePrinterDevice);
		linePrinter.printNormal("A\n");
		linePrinter.printNormal("Z\n");
		linePrinter.close();
	}
	
	@Kroll.method
	public void printText(String value) {
		BuildinPrinter print = new BuildinPrinter();
		int response;
		response = print.open(DeviceCommon.DEVICE_MODE_COMMON, DeviceCommon.DEVICE_HOST_LOCALHOST);
		if(response != 0)
		{
			// error
		}
		byte[] set = { '1','2','3','4','5','6','7','8','9','0', (byte)0x0d, (byte)0x0a };
		response = print.print(set, set.length);
		if(response != 0)
		{
			// error
		}
		byte[] data = new byte[32];
		response = print.getEndStatus(data);
		if(response != 0)
		{
			// error
		}
		response = print.initCutter();
		if(response != 0)
		{
			// error
		}
		response = print.getStatus(data);
		if(response != 0)
		{
			// error
		}
		response = print.close();
	}
	
	// Properties
	@Kroll.getProperty
	public String getExampleProp()
	{
		Log.d(LCAT, "get example property");
		return "hello world";
	}
	
	
	@Kroll.setProperty
	public void setExampleProp(String value) {
		Log.d(LCAT, "set example property: " + value);
	}

}

